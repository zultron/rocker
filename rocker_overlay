#!/bin/bash -e


usage() {
    if test -z "$*"; then
        RC=0
    else
        echo "Error:  $*" >&2
        RC=1
    fi
    cat >&2 <<-EOF
	Build ROS Docker overlay image
	Usage: $0 [args...]
	    -b ROCKER_BASE_IMAGE:  Base image to start from
	    -t ROCKER_IMAGE_TAG:   Final image tag
	    -w:                    Install package deps from workspace sources
	                           (ROCKER_WORKSPACE_DEPS=true)
	    -p:                    Print the Dockerfile (don't build)
	    If a '.rocker' file exists in the workspace, it will be sourced
	      and any \$ROCKER_* will be read
	EOF
    exit $RC
}

dockerfile() {
    local EXTRA_PKGS="$(echo -e "${ROCKER_EXTRA_PACKAGES[*]/#/\\\\\\n        }")"
    local SKIP_KEYS="$(echo -e "${ROCKER_SKIP_KEYS[*]/#/\\\\\\n        --skip-keys=}")"
    cat <<-EOF
	ARG ROCKER_BASE_IMAGE
	FROM \${ROCKER_BASE_IMAGE}

	RUN apt-get update \\
	    && apt-get install -y python3-pip \\
	    && apt-get clean \\
	    && pip3 install catkin-tools

	RUN echo "%sudo ALL=(ALL:ALL) NOPASSWD: ALL" >> /etc/sudoers.d/50-nopass \\
	    && chmod 600 /etc/sudoers.d/50-nopass

	RUN apt-get update \\
	    && apt-get upgrade -y

	RUN apt-get update \\
	    && apt-get install -y \\
	        ccache \\
	        clang \\
	        clang-tidy \\
	        clang-tools \\
	        gdb \\
	        xterm \\
	        python3-vcstool \\
	        wget \
	        $(echo -n "$EXTRA_PKGS") \\
	    && apt-get clean

	EOF

    if $ROCKER_WORKSPACE_DEPS; then
        cat <<-EOF
	COPY . /tmp/ros_ws
	RUN rosdep update \\
	    && cd /tmp/ros_ws \\
	    && rosdep install -y --rosdistro \$ROS_DISTRO \\
	        --ignore-src --from-paths src $(echo -n "$SKIP_KEYS")

	EOF
    fi
}

# Read from any .rocker config
if test -f $(pwd)/.rocker; then
    source $(pwd)/.rocker
fi

# Command-line args override those settings
PRINT_DOCKERFILE=false
while getopts :t:b:wph ARG; do
    case $ARG in
	# Build args
	t) ROCKER_IMAGE_TAG=$OPTARG ;;
	b) ROCKER_BASE_IMAGE=$OPTARG ;;
	w) ROCKER_WORKSPACE_DEPS=true ;;
        p) PRINT_DOCKERFILE=true ;;
	# Usage
	h) usage ;;
	:) usage "Option -$OPTARG requires an argument" ;;
	*) usage "Illegal option -$OPTARG" ;;
    esac
done
shift $(($OPTIND - 1))

# Check options and set defaults
test -n "$ROCKER_BASE_IMAGE" || usage "No base image specified"
ROCKER_IMAGE_TAG=${ROCKER_IMAGE_TAG:-${ROCKER_BASE_IMAGE}_overlay}
if test "$ROCKER_WORKSPACE_DEPS" != true; then
    ROCKER_WORKSPACE_DEPS=false
fi

# Construct `docker build` args
BUILD_ARGS=(
    --build-arg ROCKER_BASE_IMAGE=$ROCKER_BASE_IMAGE
    --tag $ROCKER_IMAGE_TAG
    )
if $ROCKER_WORKSPACE_DEPS; then
    BUILD_ARGS+=(
	-f -
	$(pwd)
    )
else
    BUILD_ARGS+=( - )
fi

# Print Dockerfile and exit if -p specified
if $PRINT_DOCKERFILE; then
    dockerfile
    exit 0
fi

# Run `docker build`, feeding the Dockerfile over stdin
dockerfile | {
    set -x
    exec docker build "${BUILD_ARGS[@]}"
}
