#!/bin/bash


usage() {
    if test -z "$*"; then
        RC=0
    else
        echo "Error:  $*" >&2
        RC=1
    fi
    cat >&2 <<EOF
Usage: $0 [-t TAG] IMAGE
      -t TAG:   Tag final image with TAG
      IMAGE:    Docker image tag to build on
EOF
    exit $RC
}

dockerfile_base() {
    cat <<EOF
ARG BASE_IMAGE
FROM \${BASE_IMAGE}

RUN apt-get update \
    && apt-get install -y python-pip \
    && apt-get clean \
    && pip install catkin-tools

RUN echo "%sudo ALL=(ALL:ALL) NOPASSWD: ALL" >> /etc/sudoers.d/50-nopass \
    && chmod 600 /etc/sudoers.d/50-nopass

RUN apt-get update \
    && apt-get install -y \
        ccache \
	clang \
	clang-tidy \
	clang-tools \
	gdb \
	xterm \
	wget \
    && apt-get clean

EOF
}

dockerfile_workspace() {
    cat <<EOF
    COPY . /tmp/ros_ws
    RUN cd /tmp/ros_ws \
	&& ls -l \
	&& rosdep install -y --rosdistro \$ROS_DISTRO --ignore-src --from-paths src

EOF
}

BASE_IMAGE=$1; shift
IMAGE_TAG=${BASE_IMAGE}_overlay
WORKSPACE_DEPS=false
CONTEXT_DIR=""
while getopts :t:wh ARG; do
    case $ARG in
    t) IMAGE_TAG=$OPTARG ;;
    w) WORKSPACE_DEPS=true; CONTEXT_DIR=$(pwd) ;;
    # Usage
    h) usage ;;
    :) usage "Option -$OPTARG requires an argument" ;;
    *) usage "Illegal option -$OPTARG" ;;
    esac
done
shift $(($OPTIND - 1))

BUILD_ARGS=(
    --build-arg BASE_IMAGE=$BASE_IMAGE
    --tag $IMAGE_TAG
    )

if test -n "$CONTEXT_DIR"; then
    BUILD_ARGS+=(
	-f -
	$CONTEXT_DIR
    )
else
    BUILD_ARGS+=( - )
fi

{
    dockerfile_base
    if $WORKSPACE_DEPS; then
	dockerfile_workspace
    fi
} | {
    set -x
    exec docker build "${BUILD_ARGS[@]}"
}
